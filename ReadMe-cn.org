* Git 规则速查

** 编辑提交

*** 我刚刚提交了什么?

假如你用 `git commit -a` 盲目的提交了改变, 而你想在想看看你刚刚提交的内容. 你可以用下面的命令查看你的当前的 HEAD 中的最新的提交:
#+BEGIN_SRC bash
(master)$ git show
#+END_SRC
或
#+BEGIN_SRC bash
$ git log -n1 -p
#+END_SRC

*** 写错了提交的消息

如果你写错了提交的消息, 而且提交还没有被推送的话, 下面的命令可以用来改变提交的消息:
#+BEGIN_SRC bash
$ git commit --amend
#+END_SRC

如果你想要之间指定修改后的消息的话, 可以这样做:
#+BEGIN_SRC bash
$ git commit --amend -m 'xxxxx'
#+END_SRC

如果你已经推送了这个消息的话, 你可以修改 (amend) 这个提交, 然后强制推送, 但是不建议这样做.

*** 提交的时候用了错误名字和邮件配置

如果错误只发生在一次提交中, 修改这个提交.
#+BEGIN_SRC bash
$ git commit --amend --author "作者名字 <作者邮件@地址>" 
#+END_SRC
如果你想要修改所有的历史, 查看git 文档的 'git filter-branch' 页.

*** 从一个提交中移除一个文件
为了从一个提交中移除一个文件, 使用下面的命令:
#+BEGIN_SRC bash
$ git checkout HEAD^ myfile
$ git add -A
$ git commit --amend
#+END_SRC

当你打了一个补丁, 但是提交了不必要的文件的时候, 这非常有用, 还需要强制推送, 以更新远程仓库中这个补丁.

*** 删除或移除最后的提交

如果你需要删除已经推送了的提交, 你可以使用下面的命令. 但是这会扰乱你的仓库的历史, 其他已经拉下了这个仓库的其他人的历史也会没打乱. 总之, 你永远都不该这样做.

#+BEGIN_SRC bash
$ git reset HEAD^ --hard
$ git push -f [remote] [branch]
#+END_SRC

如果你还没有推送, 把 Git 重设为你最后提交以前的状态(同时保持你的 staged 的改变):
#+BEGIN_SRC bash
(my-branch*)$ git reset --soft HEAD@{1}
#+END_SRC
这只有当你还没有推送的时候才管用. 如果你已经推送了, 能做的唯一的安全的事情就是 =git revert SHAofBadCommit=. 这将会创建一个新的提交, 在这个新提交中会撤销上个提交中的改变. 如果你推送到的分支是 rebase-safe (不期望其他的开发者从这个分支拉去代码) 的话, 你可以使用 =git push -f=. 更多内容查看上一段内容.

*** 删除移除任意的提交
上一节的警告, 同样适用这一节. 可能的话, 永远不要做.
#+BEGIN_SRC bash
$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT
$ git push -f [remote] [branch]
#+END_SRC

或者做一个交互的 从新分组 并移除你想要删除的提交的行.

*** 推送修改的提交到远程的时候, 发生了错误
#+BEGIN_SRC
To https://github.com/yourusername/repo.git
! [rejected]        mybranch -> mybranch (non-fast-forward)
error: failed to push some refs to 'https://github.com/tanay1337/webmaker.org.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
#+END_SRC

注意, 像使用 rebasing (见下面), *用一个新的提交修改一个久的提交的*,  如果你已经把你修改前的提交推送到了远程之后, 你必须强制推送 (=-f=) 你的改变. 当你需要这样做的时候, 要小心 - /总是/ 要确保你制定一个分支!
#+BEGIN_SRC sh
(my-brach)$ git push origin mybranch -f
#+END_SRC
一般来说, *避免强制推送*. 最好创建并推送一个新的提交而不是强制推送修改的提交, 因为这样做, 任何与这个分支其子分支有交互的任何其他开发者的源码历史中引发冲突.

*** 错误的硬重设了, 想要改回来
如果你错误的做了 =git reset --hard=, 你可以把你的提交在找回来, 因为 git 记录了一些天的所有事情的记录.
#+BEGIN_SRC sh
(master)$ git reflog
#+END_SRC 
这样你将看到一个你过去的提交, 以及重设的提交的列表. 选择你想要返回的提交的 SHA, 然后再次重设:
#+BEGIN_SRC sh
(master)$ git reset --hard SHA1234
#+END_SRC
然后你就得到你想要的了.
** 记录要提交的内容(Staging)

*** 把以及记录改变添加到上一个提交中

#+BEGIN_SRC sh
(my-branch*)$ git commit --amend
#+END_SRC

*** 记录新文件的一部分, 而不是整个文件
通常情况下, 如果你想记录一个文件的一部分, 你可以运行下面的命令:
#+BEGIN_SRC sh
$ git add --patch filename.x
#+END_SRC

=-p= 简洁形式. 这将打开一个交互模式. 你能使用 =s= 选项来把拆分提交 - 然而, 如果文件是新的, 你不需要这个选项. 要添加一个新文件, 使用下面的命令:
#+BEGIN_SRC sh
git add -N filename.x
#+END_SRC
然后, 你需要使用 =e= 选项来手动的选择添加那些行. 运行 =git diff --cached= 将会显示已经记录的内容的和本地存储之间有差异的行.

*** 把一个文件中的改变添加到两个不同的提交中

=git add= 将会添加整个文件到一个提交中. =git add -p= 允许你交互式的选择添加那些改变.

*** 记录未记录的编辑并撤销已经记录编辑
这很难做到. 我知道的最好的办法是你应该先存储(stash) 你未记录要提交的内容的编辑. 然后, 重设. 然后把你存储的编辑弹出, 然后添加它们.
#+BEGIN_SRC sh
$ git stash -k
$ git reset --hard
$ git stash pop
$ git add -A
#+END_SRC

** 未记录的编辑
*** 把我的未记录的编辑移到新分支
#+BEGIN_SRC sh
$ git checkout -p my-branch
#+END_SRC

*** 把我的未记录编辑移到其他的已经存在的分支
#+BEGIN_SRC sh
$ git stash
$ git checkout my-branch
$ git stash pop
#+END_SRC

*** 撤销本地的, 未提交的改变
如果你只是想回到起初和你本地之间的某个提交, 你可以这样做:
#+BEGIN_SRC sh
# one commit
(my-branch)$ git reset --hard HEAD^
# two commits
(my-branch)$ git reset --hard HEAD^^
# four commits
(my-branch)$ git reset --hard HEAD~4
# or
(master)$ git checkout -f
#+END_SRC

要重设一个特定的文件, 你可以使用文件名作为参数:
#+BEGIN_SRC sh
$ git reset filename
#+END_SRC

*** 放弃特定的未记录的改变
当你想要在你正在工作的备份中去掉一些的时候.

检出不想要的改变, 保持好的改变.
#+BEGIN_SRC sh
$ git checkout -p
# 对所有你想要丢弃的片段 回答 y 
#+END_SRC

另外一个策略涉及到使用 =stash=. 把所有的好的改变保存起来, 重设工作的备份, 然后把好的改变拿回来.

#+BEGIN_SRC sh
$ git stash -p
# 选择所有的你想要保存的片段
$ git reset --hard
$ git stash pop
#+END_SRC

或者, 把你不想要的改变保存起来, 然后丢掉这个保存.
#+BEGIN_SRC sh
$ git stash -p
# 选择所有你不想要保存的片段
$ git stash drop
#+END_SRC
